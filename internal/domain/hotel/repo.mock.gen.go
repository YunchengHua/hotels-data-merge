// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package hotel is a generated GoMock package.
package hotel

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetFromSource1 mocks base method.
func (m *MockRepo) GetFromSource1(ctx context.Context) (map[string]*Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromSource1", ctx)
	ret0, _ := ret[0].(map[string]*Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromSource1 indicates an expected call of GetFromSource1.
func (mr *MockRepoMockRecorder) GetFromSource1(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromSource1", reflect.TypeOf((*MockRepo)(nil).GetFromSource1), ctx)
}

// GetFromSource2 mocks base method.
func (m *MockRepo) GetFromSource2(ctx context.Context) (map[string]*Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromSource2", ctx)
	ret0, _ := ret[0].(map[string]*Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromSource2 indicates an expected call of GetFromSource2.
func (mr *MockRepoMockRecorder) GetFromSource2(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromSource2", reflect.TypeOf((*MockRepo)(nil).GetFromSource2), ctx)
}

// GetFromSource3 mocks base method.
func (m *MockRepo) GetFromSource3(ctx context.Context) (map[string]*Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromSource3", ctx)
	ret0, _ := ret[0].(map[string]*Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromSource3 indicates an expected call of GetFromSource3.
func (mr *MockRepoMockRecorder) GetFromSource3(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromSource3", reflect.TypeOf((*MockRepo)(nil).GetFromSource3), ctx)
}
